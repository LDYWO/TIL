import java.util.*;

public class BOJ_Special {

    public static void main(String[] args) {

    }
}

/*
    숨바꼭질

    - 수빈이의 위치 : N
    - 동생의 위치 : K
    - 동생을 찾는 가장 빠른 시간을 구하는 문제
    - 시간을 의미하는 것은 가중치가 1, 즉 1초
    - X -> X+1, X-1, 2X
    - BFS 는 가중치가 1인 (1초의 시간) 최단거리 (최단 시간) 문제

    시간 복잡도는 O(E)
    한번 방문한 점을 방문하지 않는다.
    수빈이가 도달한 시간이 수빈이의 동생이 도달한 시간보다 작아야 한다.
    그러면 언젠가 도착을한다는 의미

 */


/*
    파이프 옮기기

    항상 파이프는 2개의 좌표로 이루어져있다.
    첫 번째는 두가지의 좌표를 다 저장하는 경우
    두 번째는 하나의 좌표를 저장하고 꺾인 방향을 저장하는 방법

    앞 칸과 방향을 고려해야한다.

    방법의 수가 100만을 넘지 않는다.
    따라서, 브루트 포스로 풀 수 있다.
    조건이 달려서 다이나믹 프로그래밍이 아니라 브루트 포스로 할 수 있다.

 */