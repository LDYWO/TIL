class LogicGate():
    def __init__(self,n):
        self.label = n
        self.output = None

    def getLabel(self):
            return self.label

    def getOutput(self):
            self.output = self.performGateLogic()
            return self.output

class BinaryGate(LogicGate):
    def __init__(self,n):
        LogicGate.__init__(self,n)
        self.pinA = None
        self.pinB = None

    def getPinA(self):
        if self.pinA == None:
            return input("Enter Pin A input for gate "+ \
                         self.getLabel()+"-->")
        else:
            return self.pinA.getFrom().getOutput()
        
    def getPinB(self):
        if self.pinB == None:
            return input("Enter Pin B input for gate "+ \
                         self.getLabel()+"-->")
        else:
            return self.pinB.getFrom().getOutput()

    def setNextPin(self,source):
        if self.pinA == None:
            self.pinA = source
        else:
            if self.pinB == None:
                self.pinB = source
            else:
                print("Cannot Connect: NO EMPTY PINS")

class AndGate(BinaryGate):
    def __init__(self,n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):
        a = self.getPinA()
        b = self.getPinB()
        if a==1 and b==1:
            return 1
        else:
            return 0

class OrGate(BinaryGate):
    def __init__(self,n):
        BinaryGate.__init__(self,n)

    def performGateLogic(self):
        a = self.getPinA()
        b = self.getPinB()
        if a==0 and b==0:
            return 0
        else:
            return 1

class UnaryGate(LogicGate):
    def __init__(self,n):
        LogicGate.__init__(self,n)
        self.pin = None

    def getPin(self):
        if self.pin == None:
            return input("Enter Pin input for gate "+ \
                         self.getLabel()+"-->")
        else:
            return self.pin.getFrom().getOutput()
        
    def setNextPin(self,source):
        if self.pin == None:
            self.pin = source
        else:
                print("Cannot Connect: NO EMPTY PINS")
    
class NotGate(UnaryGate):
    def __init__(self,n):
        UnaryGate.__init__(self,n)

    def performGateLogic(self):
        a = self.getPin()
        if a==0:
            return 1
        else:
            return 0
                
class PinGate(UnaryGate):
    def getPin(self):
        return self.pin

    def setPin(self,val):
        self.pin=val
        return self.pin

    def performGateLogic(self):
        return self.getPin()            

class Connector:
    def __init__(self,fgate,tgate):
        self.fromgate = fgate
        self.togate = tgate
        tgate.setNextPin(self)

    def getFrom(self):
        return self.fromgate

    def getTo(self):
        return self.togate

def main():
    X = PinGate("X")
    Y = PinGate("Y")
    Z = PinGate("Z")

    XN = NotGate("XN")
    X_XN = Connector(X,XN)
    YN = NotGate("YN")
    Y_YN = Connector(Y,YN)
    ZN = NotGate("ZN")
    Z_ZN = Connector(Z,ZN)

    YNZ = AndGate("YNZ")
    YN_YNZ = Connector(YN,YNZ)
    Z_YNZ = Connector(Z,YNZ)
    YZN = AndGate("YZN")
    Y_YZN = Connector(Y,YZN)
    ZN_YZN = Connector(ZN,YZN)
    YNZN = AndGate("YNZN")
    YN_YNZN = Connector(YN,YNZN)
    ZN_YNZN = Connector(ZN,YNZN)
    XY = AndGate("XY")
    X_XY = Connector(X,XY)
    Y_XY = Connector(Y,XY)
    YZ = AndGate("YZ")
    Y_YZ = Connector(Y,YZ)
    Z_YZ = Connector(Z,YZ)
    ZX = AndGate("ZX")
    Z_ZX = Connector(Z,ZX)
    X_ZX = Connector(X,ZX)

    O1 = OrGate("YNZ+YZN")
    O1A = Connector(YNZ,O1)
    O1B = Connector(YZN,O1)
    O2 = OrGate("YNZN+YZ")
    O2A = Connector(YNZN,O2)
    O2B = Connector(YZ,O2)
    O3 = OrGate("XY+YZ")
    O3A = Connector(XY,O3)
    O3B = Connector(YZ,O3)

    XNO1 = AndGate("XNO1")
    XN_XNO1 = Connector(XN,XNO1)
    O1_XNO1 = Connector(O1,XNO1)
    XO2 = AndGate("XO2")
    X_XO2 = Connector(X,XO2)
    O2_XO2 = Connector(O2,XO2)
    O4 = OrGate("O3+ZX") 
    O4A = Connector(O3,O4)
    O4B = Connector(ZX,O4)

    O5 = OrGate("XNO1+XO2")
    O5A = Connector(XNO1,O5)
    O5B = Connector(XO2,O5)

    S = O5
    C = O4

    for (x,y,z) in [(0,0,0),(0,0,1),(0,1,0),(0,1,1),(1,0,0),(1,0,1),(1,1,0),(1,1,1)]:
        X.setPin(x)
        Y.setPin(y)
        Z.setPin(z)
        print("X:",x)
        print("Y:",y)
        print("Z:",z)
        print("Sum:",S.getOutput())
        print("Carry:",C.getOutput())
        print("\n")

if __name__ == "__main__":
    main()